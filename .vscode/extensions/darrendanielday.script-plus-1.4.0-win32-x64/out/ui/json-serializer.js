const n=e=>Object.prototype.hasOwnProperty.call(e,"__$typeof$__");export const json={parse(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e&&i(e);default:return e}},serialize(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"bigint":return{__$typeof$__:"bigint",literal:e.toString()};case"symbol":return{__$typeof$__:"symbol",literal:e.toString()};case"object":return e&&o(e);default:return null}}};const o=e=>Array.isArray(e)?e.map(t=>json.serialize(t)):c(e).reduce((t,r)=>{const s=Reflect.get(e,r);return typeof s!="function"&&Reflect.set(t,r,json.serialize(s)),t},{}),c=e=>{const t=new Set(Object.keys(Object.getOwnPropertyDescriptors(e)));let r=Object.getPrototypeOf(e);for(;r!==null;){for(const s of Object.keys(Object.getOwnPropertyDescriptors(r)))t.add(s);r=Object.getPrototypeOf(r)}return[...t]},i=e=>{if(Array.isArray(e))return e.map(t=>json.parse(t));if(n(e))switch(e.__$typeof$__){case"bigint":return BigInt(e.literal);case"symbol":return Symbol.for(e.literal);default:throw new Error(`Unknown typeof: ${e.__$typeof$__}`)}return Object.keys(e).reduce((t,r)=>(Reflect.set(t,r,json.parse(Reflect.get(e,r))),t),{})};
