import{json as c}from"./json-serializer.js";typeof acquireVsCodeApi!="function"&&(alert("You need to run this app in vscode's webview. Some APIs are not available in browsers."),(()=>{let r;window.acquireVsCodeApi=()=>({getState(){return r},setState(n){r=n},postMessage(){console.warn("vscode.postMessage is not available")}})})()),window.vscodeAPI=acquireVsCodeApi();export const createMessageManager=()=>{let r=0;const n=new Map,s={},p=()=>r++,l=t=>{const e=c.parse(t.data);e.type==="response"?a.accept(e.id,e.payload.data):e.type==="error"?a.abort(e.id,e.payload.error??e.payload.message):e.type==="event"&&u(e.name,e.payload)},u=(t,e)=>{a.handlerMap[t]?.forEach(o=>{o.call(void 0,e)})},i=t=>{const e=p();return n.set(e,t),e},g=(t,e)=>{const{resolve:o}=n.get(t)??{};o?.(e),n.delete(t)},v=(t,e)=>{const{reject:o}=n.get(t)??{};o?.(e),n.delete(t)},w=async(t,e)=>new Promise((o,q)=>{const M=i({resolve:o,reject:q}),b={payload:{path:t,args:e},id:M,type:"request"};window.vscodeAPI.postMessage(c.serialize(b))}),y=(t,e)=>{const o={id:0,name:t,payload:e,type:"event"};window.vscodeAPI.postMessage(c.serialize(o))},f=(t,e)=>(s[t]??(s[t]=new Set),s[t].add(e),()=>d(t,e)),d=(t,e)=>{s[t]??(s[t]=new Set),s[t].delete(e)},a={get handlerMap(){return s},get messageQueue(){return n},get seq(){return r},enqueue:i,listener:l,accept:g,abort:v,request:w,dispatchToExtension:y,onEvent:f,offEvent:d};return a},globalMessageManager=createMessageManager();
