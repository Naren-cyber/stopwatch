import{isObject as i}from"./_snowpack/pkg/taio/build/utils/validator/object.js";import{isEnumObject as u}from"./_snowpack/pkg/taio/build/utils/validator/enum.js";import{defineValidator as e,is as r,optional as n,record as o}from"./_snowpack/pkg/taio/build/utils/validator/utils.js";import{isBoolean as m,isNumber as a,isString as t,isUndefined as p,primitiveOf as s}from"./_snowpack/pkg/taio/build/utils/validator/primitive.js";import{isAnyOf as l,isArrayOf as c,isUnionOf as g,isUnionThat as d,unionOf as f}from"./_snowpack/pkg/taio/build/utils/validator/array.js";export const isEnumOptions=e(i({enumObject:u,enumNameMapping:o(s("string"))})),isBaseArgumentField=e(i({type:l("boolean","enum","number","string"),description:n(s("string")),defaultValue:f(s("boolean"),s("number"),s("string")),enumOptions:n(isEnumOptions)})),isStringArgumentField=e(i({type:r("string"),defaultValue:t,description:n(t),enumOptions:p})),isNumberArgumentField=e(i({type:r("number"),defaultValue:a,description:n(t),enumOptions:p})),isBooleanArgumentField=e(i({type:r("boolean"),defaultValue:m,description:n(t),enumOptions:p})),isEnumArgumentField=e(i({type:r("enum"),defaultValue:d(t,a),description:n(t),enumOptions:i({enumObject:u,enumNameMapping:n(o(t))})})),isArgumentField=e(d(isStringArgumentField,isNumberArgumentField,isBooleanArgumentField,isEnumArgumentField)),isArgumentConfig=o(isArgumentField),isPassedParameter=e(o(g(m,a,t))),isPresetArgument=e(i({name:t,args:isPassedParameter})),isUserScript=e(i({name:t,lang:l("js","ts"),description:t,argumentConfig:o(isArgumentField),presetArgs:n(c(isPresetArgument))})),isScriptPlusBundle=e(i({content:t,meta:isUserScript,dependencies:o(s("string"))}));
